---
http_interactions:
- request:
    method: get
    uri: https://podsmack-microservice.herokuapp.com/search?podcast_name=conan
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 30 Jul 2020 16:56:24 GMT
      Connection:
      - keep-alive
      Content-Type:
      - text/html;charset=utf-8
      Content-Length:
      - '14522'
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Server:
      - thin
      Via:
      - 1.1 vegur
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 30 Jul 2020 16:56:25 GMT
recorded_with: VCR 6.0.0
